#!/usr/bin/env python3
"""
Enhanced DFS System Launcher
Auto-generated by setup script
"""

import sys
import os

def main():
    """Main launcher for enhanced DFS system"""
    print("üöÄ ENHANCED DFS OPTIMIZER")
    print("=" * 50)
    print("‚úÖ Vegas Lines | ‚úÖ Team Stacking | ‚úÖ Enhanced Statcast")
    print("=" * 50)

    if len(sys.argv) > 1 and sys.argv[1] == 'test':
        return run_test()
    else:
        return launch_gui()

def run_test():
    """Run system test"""
    print("\nüß™ Testing enhanced DFS system...")

    try:
        from enhanced_dfs_core import (
            load_and_optimize_with_enhanced_features,
            create_enhanced_test_data,
            StackingConfig
        )

        print("‚úÖ Enhanced core loaded")

        # Create test data
        dk_file, dff_file = create_enhanced_test_data()
        print("‚úÖ Test data created")

        # Configure stacking for cash games
        stack_config = StackingConfig()
        stack_config.enable_stacking = True
        stack_config.min_stack_size = 2
        stack_config.max_stack_size = 3

        # Run optimization
        lineup, score, summary = load_and_optimize_with_enhanced_features(
            dk_file=dk_file,
            dff_file=dff_file,
            manual_input="Kyle Tucker, Jorge Polanco",
            contest_type='classic',
            strategy='smart_confirmed',
            enable_stacking=True,
            enable_vegas=True,
            stack_config=stack_config
        )

        if lineup and score > 0:
            print(f"‚úÖ TEST PASSED!")
            print(f"üìä Generated {len(lineup)} player lineup")
            print(f"üéØ Total score: {score:.2f}")

            # Check for stacks
            team_counts = {}
            for player in lineup:
                team = getattr(player, 'team', 'UNK')
                team_counts[team] = team_counts.get(team, 0) + 1

            stacks = {t: c for t, c in team_counts.items() if c >= 2}
            if stacks:
                print(f"üèÜ Team stacks: {stacks}")

            print("\nüéâ SYSTEM WORKING PERFECTLY!")
            return 0
        else:
            print("‚ùå Test failed - no lineup generated")
            return 1

    except Exception as e:
        print(f"‚ùå Test error: {e}")
        return 1

def launch_gui():
    """Launch GUI with enhanced features"""
    print("\nüñ•Ô∏è Launching enhanced GUI...")

    try:
        import enhanced_dfs_gui

        # Patch GUI to use enhanced system
        try:
            from enhanced_dfs_core import load_and_optimize_with_enhanced_features, StackingConfig

            def enhanced_wrapper(dk_file, dff_file=None, manual_input="", 
                                contest_type='classic', strategy='smart_confirmed'):
                stack_config = StackingConfig()
                stack_config.enable_stacking = True
                stack_config.min_stack_size = 2
                stack_config.max_stack_size = 4

                return load_and_optimize_with_enhanced_features(
                    dk_file=dk_file,
                    dff_file=dff_file, 
                    manual_input=manual_input,
                    contest_type=contest_type,
                    strategy=strategy,
                    enable_stacking=True,
                    enable_vegas=True,
                    stack_config=stack_config
                )

            enhanced_dfs_gui.load_and_optimize_complete_pipeline = enhanced_wrapper
            print("‚úÖ GUI enhanced with Vegas lines and stacking")

        except ImportError:
            print("‚ö†Ô∏è Using base system (enhanced core not available)")
            from optimized_dfs_core_with_statcast import load_and_optimize_complete_pipeline
            enhanced_dfs_gui.load_and_optimize_complete_pipeline = load_and_optimize_complete_pipeline

        return enhanced_dfs_gui.main()

    except Exception as e:
        print(f"‚ùå GUI launch failed: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
