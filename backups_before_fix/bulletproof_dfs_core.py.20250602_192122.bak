#!/usr/bin/env python3
"""
ENHANCED BULLETPROOF DFS CORE - IMPROVED VERSION
==============================================
‚úÖ Enhanced multi-position support with better debugging
‚úÖ Manual-only mode for ultimate control
‚úÖ Better confirmation debugging
‚úÖ Improved player eligibility tracking
‚úÖ Enhanced lineup validation
"""

import os
import sys
import pandas as pd
import numpy as np
import tempfile
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple
import warnings
import random
import json

warnings.filterwarnings('ignore')

# Import optimization
try:
    import pulp

    MILP_AVAILABLE = True
    print("‚úÖ PuLP available - MILP optimization enabled")
except ImportError:
    MILP_AVAILABLE = False
    print("‚ö†Ô∏è PuLP not available - using greedy fallback")

# Import modules with fallbacks
try:
    from vegas_lines import VegasLines

    VEGAS_AVAILABLE = True
    print("‚úÖ Vegas lines module imported")
except ImportError:
    VEGAS_AVAILABLE = False
    print("‚ö†Ô∏è vegas_lines.py not found")


    class VegasLines:
        def __init__(self):
            self.lines = {}

        def get_vegas_lines(self):
            return {}

try:
    from confirmed_lineups import ConfirmedLineups

    CONFIRMED_AVAILABLE = True
    print("‚úÖ Confirmed lineups module imported")
except ImportError:
    CONFIRMED_AVAILABLE = False
    print("‚ö†Ô∏è confirmed_lineups.py not found")


    class ConfirmedLineups:
        def __init__(self):
            pass

        def is_player_confirmed(self, name, team):
            return False, 0

        def is_pitcher_starting(self, name, team):
            return False

try:
    from simple_statcast_fetcher import SimpleStatcastFetcher

    STATCAST_AVAILABLE = True
    print("‚úÖ Statcast fetcher imported")
except ImportError:
    STATCAST_AVAILABLE = False
    print("‚ö†Ô∏è simple_statcast_fetcher.py not found")


    class SimpleStatcastFetcher:
        def __init__(self):
            pass

        def fetch_player_data(self, name, position):
            return {}

# PARK FACTORS DATA - Conservative adjustments for extreme venues
PARK_FACTORS = {
    "COL": 1.1,
    "TEX": 1.05,
    "CIN": 1.05,
    "NYY": 1.05,
    "BOS": 1.03,
    "PHI": 1.03,
    "MIA": 0.95,
    "OAK": 0.95,
    "SD": 0.97,
    "SEA": 0.97
}

# STACKING CONFIGURATION - Conservative boosts for correlated players
STACKING_CONFIG = {
    "min_implied_runs": 4.8,
    "stack_boost_small": 0.3,
    "stack_boost_medium": 0.5,
    "stack_boost_large": 0.8,
    "max_stack_size": 3
}


class EnhancedAdvancedPlayer:
    """Enhanced player model with better multi-position and debugging support"""

    def __init__(self, player_data: Dict):
        # Basic attributes
        self.id = int(player_data.get('id', 0))
        self.name = str(player_data.get('name', '')).strip()
        self.positions = self._parse_positions(player_data.get('position', ''))
        self.primary_position = self.positions[0] if self.positions else 'UTIL'
        self.team = str(player_data.get('team', '')).strip().upper()
        self.salary = self._parse_salary(player_data.get('salary', 3000))
        self.projection = self._parse_float(player_data.get('projection', 0))

        # Enhanced confirmation tracking
        self.is_confirmed = False
        self.is_manual_selected = False
        self.confirmation_sources = []
        self.debug_info = {}  # For debugging eligibility

        # Advanced data integration
        self.dff_data = {}
        self.vegas_data = {}
        self.statcast_data = {}
        self.park_factors = {}
        self.recent_performance = {}
        self.platoon_data = {}

        # Calculate base score
        self.base_score = self.projection if self.projection > 0 else (self.salary / 1000.0)
        self.enhanced_score = self.base_score

        # Debug multi-position parsing
        if len(self.positions) > 1:
            self.debug_info['multi_position'] = True
            self.debug_info['all_positions'] = self.positions
            print(f"üîÑ MULTI-POSITION: {self.name} can play {'/'.join(self.positions)}")

    def _parse_positions(self, position_str: str) -> List[str]:
        """Enhanced position parsing with better multi-position support"""
        if not position_str:
            return ['UTIL']

        position_str = str(position_str).strip().upper()

        # Handle various delimiters for multi-position players
        delimiters = ['/', ',', '-', '|', '+', ' ', ';']
        positions = [position_str]  # Start with original string

        for delimiter in delimiters:
            if delimiter in position_str:
                positions = [p.strip() for p in position_str.split(delimiter) if p.strip()]
                break

        # Clean and validate positions
        valid_positions = []
        position_mapping = {
            'P': 'P', 'PITCHER': 'P',
            'C': 'C', 'CATCHER': 'C',
            '1B': '1B', 'FIRST': '1B', 'FIRSTBASE': '1B',
            '2B': '2B', 'SECOND': '2B', 'SECONDBASE': '2B',
            '3B': '3B', 'THIRD': '3B', 'THIRDBASE': '3B',
            'SS': 'SS', 'SHORTSTOP': 'SS', 'SHORT': 'SS',
            'OF': 'OF', 'OUTFIELD': 'OF', 'OUTFIELDER': 'OF',
            'LF': 'OF', 'CF': 'OF', 'RF': 'OF',  # Convert specific OF positions
            'UTIL': 'UTIL', 'DH': 'UTIL'
        }

        for pos in positions:
            pos = pos.strip().upper()
            if pos in position_mapping:
                mapped_pos = position_mapping[pos]
                if mapped_pos not in valid_positions:
                    valid_positions.append(mapped_pos)

        return valid_positions if valid_positions else ['UTIL']

    def _parse_salary(self, salary_input: Any) -> int:
        """Parse salary from various formats"""
        try:
            if isinstance(salary_input, (int, float)):
                return max(1000, int(salary_input))
            cleaned = str(salary_input).replace('$', '').replace(',', '').strip()
            return max(1000, int(float(cleaned))) if cleaned and cleaned != 'nan' else 3000
        except (ValueError, TypeError):
            return 3000

    def _parse_float(self, value: Any) -> float:
        """Parse float from various formats"""
        try:
            if isinstance(value, (int, float)):
                return max(0.0, float(value))
            cleaned = str(value).strip()
            return max(0.0, float(cleaned)) if cleaned and cleaned != 'nan' else 0.0
        except (ValueError, TypeError):
            return 0.0

    def is_eligible_for_selection(self, mode: str = 'bulletproof') -> bool:
        """Enhanced eligibility check with mode support"""
        if mode == 'manual_only':
            return self.is_manual_selected
        elif mode == 'confirmed_only':
            return self.is_confirmed
        else:  # bulletproof (default)
            return self.is_confirmed or self.is_manual_selected

    def add_confirmation_source(self, source: str):
        """Add confirmation source with better debugging"""
        if source not in self.confirmation_sources:
            self.confirmation_sources.append(source)
        self.is_confirmed = True
        self.debug_info['confirmed_by'] = source
        print(f"üîí CONFIRMED: {self.name} ({source})")

    def set_manual_selected(self):
        """Set player as manually selected with debugging"""
        self.is_manual_selected = True
        self.confirmation_sources.append("manual_selection")
        self.debug_info['manual_selected'] = True
        print(f"üéØ MANUAL: {self.name}")

    def can_play_position(self, position: str) -> bool:
        """Enhanced position checking"""
        can_play = position in self.positions or position == 'UTIL'
        if can_play and len(self.positions) > 1:
            self.debug_info[f'can_play_{position}'] = True
        return can_play

    def get_detailed_status_string(self) -> str:
        """Enhanced status string with detailed debugging info"""
        status_parts = []

        # Eligibility status
        if self.is_confirmed and self.is_manual_selected:
            status_parts.append("CONFIRMED+MANUAL")
        elif self.is_confirmed:
            sources = ", ".join(self.confirmation_sources)
            status_parts.append(f"CONFIRMED ({sources})")
        elif self.is_manual_selected:
            status_parts.append("MANUAL")
        else:
            status_parts.append("UNCONFIRMED")

        # Multi-position info
        if len(self.positions) > 1:
            status_parts.append(f"MULTI-POS: {'/'.join(self.positions)}")

        # Data enrichment status
        if self.dff_data.get('ppg_projection', 0) > 0:
            status_parts.append(f"DFF:{self.dff_data['ppg_projection']:.1f}")
        if self.statcast_data:
            status_parts.append("STATCAST")
        if self.vegas_data:
            status_parts.append("VEGAS")
        if self.park_factors:
            status_parts.append("PARK")

        return " | ".join(status_parts)

    def get_debug_info(self) -> Dict:
        """Get all debug information for this player"""
        return {
            'name': self.name,
            'positions': self.positions,
            'primary_position': self.primary_position,
            'is_confirmed': self.is_confirmed,
            'is_manual_selected': self.is_manual_selected,
            'confirmation_sources': self.confirmation_sources,
            'debug_info': self.debug_info,
            'salary': self.salary,
            'enhanced_score': self.enhanced_score
        }

    def __repr__(self):
        pos_str = '/'.join(self.positions)
        status = "‚úÖ" if self.is_eligible_for_selection() else "‚ùå"
        return f"Player({self.name}, {pos_str}, ${self.salary}, {self.enhanced_score:.1f}, {status})"


class EnhancedBulletproofDFSCore:
    """Enhanced Bulletproof DFS Core with manual-only mode and better debugging"""

    def __init__(self):
        self.players = []
        self.contest_type = 'classic'
        self.salary_cap = 50000
        self.optimization_mode = 'bulletproof'  # bulletproof, manual_only, confirmed_only

        # Initialize modules
        self.vegas_lines = VegasLines() if VEGAS_AVAILABLE else None
        self.confirmed_lineups = ConfirmedLineups() if CONFIRMED_AVAILABLE else None
        self.statcast_fetcher = SimpleStatcastFetcher() if STATCAST_AVAILABLE else None

        print("üöÄ Enhanced Bulletproof DFS Core initialized")

    def set_optimization_mode(self, mode: str):
        """Set optimization mode"""
        valid_modes = ['bulletproof', 'manual_only', 'confirmed_only']
        if mode in valid_modes:
            self.optimization_mode = mode
            print(f"‚öôÔ∏è Optimization mode set to: {mode}")
        else:
            print(f"‚ùå Invalid mode. Choose from: {valid_modes}")

    def load_draftkings_csv(self, file_path: str) -> bool:
        """Enhanced CSV loading with better multi-position support"""
        try:
            print(f"üìÅ Loading DraftKings CSV: {Path(file_path).name}")

            if not os.path.exists(file_path):
                print(f"‚ùå File not found: {file_path}")
                return False

            df = pd.read_csv(file_path)
            print(f"üìä Found {len(df)} rows")

            # Enhanced column detection
            column_map = self._detect_csv_columns(df)
            print(f"üîç Detected columns: {column_map}")

            players = []
            multi_position_count = 0

            for idx, row in df.iterrows():
                try:
                    player_data = {
                        'id': idx + 1,
                        'name': str(row.iloc[column_map.get('name', 0)]).strip(),
                        'position': str(row.iloc[column_map.get('position', 1)]).strip(),
                        'team': str(row.iloc[column_map.get('team', 2)]).strip(),
                        'salary': row.iloc[column_map.get('salary', 3)],
                        'projection': row.iloc[column_map.get('projection', 4)]
                    }

                    player = EnhancedAdvancedPlayer(player_data)
                    if player.name and player.salary > 0:
                        players.append(player)
                        if len(player.positions) > 1:
                            multi_position_count += 1

                except Exception as e:
                    print(f"‚ö†Ô∏è Error processing row {idx}: {e}")
                    continue

            self.players = players
            print(f"‚úÖ Loaded {len(self.players)} valid players")
            print(f"üîÑ Multi-position players: {multi_position_count}")

            # Show sample multi-position players
            self._show_multi_position_sample()

            return True

        except Exception as e:
            print(f"‚ùå Error loading CSV: {e}")
            return False

    def _detect_csv_columns(self, df: pd.DataFrame) -> Dict[str, int]:
        """Enhanced column detection"""
        column_map = {}

        for i, col in enumerate(df.columns):
            col_lower = str(col).lower().strip()

            if 'name' in col_lower and 'name' not in column_map:
                column_map['name'] = i
            elif any(pos in col_lower for pos in ['position', 'pos', 'roster']):
                column_map['position'] = i
            elif any(team in col_lower for team in ['team', 'teamabbrev']):
                column_map['team'] = i
            elif any(sal in col_lower for sal in ['salary', 'sal']):
                column_map['salary'] = i
            elif any(proj in col_lower for proj in ['avgpointspergame', 'fppg', 'projection']):
                column_map['projection'] = i

        return column_map

    def _show_multi_position_sample(self):
        """Show sample of multi-position players for debugging"""
        multi_pos_players = [p for p in self.players if len(p.positions) > 1]
        if multi_pos_players:
            print(f"\nüîÑ Sample multi-position players:")
            for player in multi_pos_players[:5]:  # Show first 5
                print(f"   {player.name}: {'/'.join(player.positions)}")

    def apply_manual_selection(self, manual_input: str) -> int:
        """Enhanced manual selection with better debugging"""
        if not manual_input:
            return 0

        # Parse manual input
        manual_names = []
        for delimiter in [',', ';', '\n', '|']:
            if delimiter in manual_input:
                manual_names = [name.strip() for name in manual_input.split(delimiter)]
                break
        else:
            manual_names = [manual_input.strip()]

        manual_names = [name for name in manual_names if name and len(name) > 2]

        if not manual_names:
            return 0

        print(f"üéØ Processing manual selection: {len(manual_names)} players")

        matches = 0
        for manual_name in manual_names:
            # Enhanced fuzzy matching
            best_match = None
            best_score = 0

            for player in self.players:
                similarity = self._name_similarity(manual_name, player.name)
                if similarity > best_score and similarity >= 0.7:
                    best_score = similarity
                    best_match = player

            if best_match:
                best_match.set_manual_selected()
                matches += 1
                print(f"   ‚úÖ {manual_name} ‚Üí {best_match.name} (similarity: {best_score:.2f})")
            else:
                print(f"   ‚ùå {manual_name} ‚Üí No match found")

        return matches

    def _name_similarity(self, name1: str, name2: str) -> float:
        """Enhanced name similarity matching"""
        name1 = name1.lower().strip()
        name2 = name2.lower().strip()

        # Exact match
        if name1 == name2:
            return 1.0

        # Check if one is contained in the other
        if name1 in name2 or name2 in name1:
            return 0.85

        # Check last name + first initial
        name1_parts = name1.split()
        name2_parts = name2.split()

        if len(name1_parts) >= 2 and len(name2_parts) >= 2:
            if (name1_parts[-1] == name2_parts[-1] and
                    name1_parts[0][0] == name2_parts[0][0]):
                return 0.8

        return 0.0

    def detect_confirmed_players(self) -> int:
        """Enhanced confirmed player detection with debugging"""
        if not self.confirmed_lineups:
            print("‚ö†Ô∏è Confirmed lineups module not available")
            return 0

        print("üîç Detecting confirmed players...")

        # Ensure data is loaded
        if hasattr(self.confirmed_lineups, 'ensure_data_loaded'):
            print("‚è≥ Ensuring confirmed lineup data is loaded...")
            self.confirmed_lineups.ensure_data_loaded(max_wait_seconds=15)

        confirmed_count = 0
        for player in self.players:
            # Check if player is in confirmed lineups
            is_confirmed, batting_order = self.confirmed_lineups.is_player_confirmed(player.name, player.team)

            if is_confirmed:
                player.add_confirmation_source("online_lineup")
                confirmed_count += 1

            # Check if pitcher is confirmed starting
            if player.primary_position == 'P':
                if self.confirmed_lineups.is_pitcher_starting(player.name, player.team):
                    player.add_confirmation_source("online_pitcher")
                    confirmed_count += 1

        print(f"‚úÖ Confirmed detection: {confirmed_count} players")
        return confirmed_count

    def get_eligible_players_enhanced(self):
        """Enhanced eligible player selection based on mode"""
        eligible = [p for p in self.players if p.is_eligible_for_selection(self.optimization_mode)]

        print(f"üîí {self.optimization_mode.upper()} FILTER: {len(eligible)}/{len(self.players)} players eligible")

        # Debug breakdown
        if self.optimization_mode == 'bulletproof':
            confirmed_only = [p for p in self.players if p.is_confirmed and not p.is_manual_selected]
            manual_only = [p for p in self.players if p.is_manual_selected and not p.is_confirmed]
            both = [p for p in self.players if p.is_confirmed and p.is_manual_selected]
            print(f"   üìä Breakdown: {len(confirmed_only)} confirmed, {len(manual_only)} manual, {len(both)} both")

        return eligible

    def print_eligibility_debug(self):
        """Print detailed eligibility debugging information"""
        print("\n" + "=" * 80)
        print("üîç DETAILED ELIGIBILITY DEBUG REPORT")
        print("=" * 80)

        total_players = len(self.players)
        confirmed_players = [p for p in self.players if p.is_confirmed]
        manual_players = [p for p in self.players if p.is_manual_selected]
        eligible_players = [p for p in self.players if p.is_eligible_for_selection(self.optimization_mode)]

        print(f"üìä SUMMARY:")
        print(f"   Total players: {total_players}")
        print(f"   Confirmed players: {len(confirmed_players)}")
        print(f"   Manual players: {len(manual_players)}")
        print(f"   Eligible ({self.optimization_mode}): {len(eligible_players)}")

        print(f"\nüéØ SAMPLE ELIGIBLE PLAYERS:")
        for i, player in enumerate(eligible_players[:10]):  # Show first 10
            print(f"   {i + 1:2d}. {player.get_detailed_status_string()}")

        if len(eligible_players) > 10:
            print(f"   ... and {len(eligible_players) - 10} more")

        print("\n" + "=" * 80)

    def export_debug_data(self, filename: str = None) -> str:
        """Export detailed debug data to JSON file"""
        if not filename:
            filename = f"dfs_debug_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

        debug_data = {
            'optimization_mode': self.optimization_mode,
            'total_players': len(self.players),
            'eligible_players': len([p for p in self.players if p.is_eligible_for_selection(self.optimization_mode)]),
            'timestamp': datetime.now().isoformat(),
            'players': [player.get_debug_info() for player in self.players]
        }

        with open(filename, 'w') as f:
            json.dump(debug_data, f, indent=2)

        print(f"üìã Debug data exported to: {filename}")
        return filename

    def optimize_lineup_enhanced(self):
        """Enhanced optimization with mode support"""
        print(f"üéØ ENHANCED {self.optimization_mode.upper()} OPTIMIZATION")
        print("=" * 60)

        mode_descriptions = {
            'bulletproof': 'Confirmed + Manual players ONLY',
            'manual_only': 'Manual players ONLY (ultimate control)',
            'confirmed_only': 'Confirmed players ONLY (no manual)'
        }

        print(f"üîí Strategy: {mode_descriptions.get(self.optimization_mode, 'Unknown')}")
        print("üìä Analysis: ALL statistical data with 80% confidence")
        print("üìà Maximum adjustment: 20% (realistic ceiling)")
        print("=" * 60)

        # Get eligible players based on mode
        eligible_players = self.get_eligible_players_enhanced()

        if len(eligible_players) < 10:
            print(f"‚ùå INSUFFICIENT ELIGIBLE PLAYERS: {len(eligible_players)}/10 required")
            print(f"üí° Current mode: {self.optimization_mode}")
            if self.optimization_mode == 'manual_only':
                print("üí° Add more manual players")
            elif self.optimization_mode == 'confirmed_only':
                print("üí° Wait for more confirmed lineups or switch to bulletproof mode")
            else:
                print("üí° Add more manual players or wait for more confirmed lineups")
            return [], 0

        # Position validation
        position_counts = self._validate_position_coverage(eligible_players)
        position_requirements = {'P': 2, 'C': 1, '1B': 1, '2B': 1, '3B': 1, 'SS': 1, 'OF': 3}

        for pos, required in position_requirements.items():
            if position_counts[pos] < required:
                print(f"‚ùå INSUFFICIENT {pos} PLAYERS: {position_counts[pos]}/{required}")
                print(f"üí° Add more {pos} players to your selection")
                return [], 0

        print(f"‚úÖ Using {len(eligible_players)} eligible players")

        # Apply comprehensive statistical analysis
        self._apply_comprehensive_statistical_analysis(eligible_players)

        # Apply enhancement features
        self.apply_park_factors()
        self.apply_conservative_stacking()

        # Use MILP if available
        if MILP_AVAILABLE:
            return self._optimize_milp(eligible_players)
        else:
            return self._optimize_greedy(eligible_players)

    def _validate_position_coverage(self, players):
        """Enhanced position validation with multi-position support"""
        position_requirements = {'P': 2, 'C': 1, '1B': 1, '2B': 1, '3B': 1, 'SS': 1, 'OF': 3}
        position_counts = {}

        for pos in position_requirements.keys():
            position_counts[pos] = sum(1 for p in players if p.can_play_position(pos))

        # Debug multi-position impact
        multi_pos_players = [p for p in players if len(p.positions) > 1]
        if multi_pos_players:
            print(f"üîÑ Multi-position players providing flexibility: {len(multi_pos_players)}")
            for player in multi_pos_players[:3]:  # Show first 3
                print(f"   {player.name}: {'/'.join(player.positions)}")

        return position_counts

    def _apply_comprehensive_statistical_analysis(self, players):
        """Apply comprehensive statistical analysis with 80% confidence"""
        print(f"üìä Comprehensive statistical analysis: {len(players)} players")

        CONFIDENCE_THRESHOLD = 0.80
        MAX_TOTAL_ADJUSTMENT = 0.20
        MIN_SIGNIFICANCE = 0.03

        adjusted_count = 0
        for player in players:
            original_score = player.enhanced_score
            total_adjustment = 0.0

            # L5 Performance Analysis
            if hasattr(player, 'dff_data') and player.dff_data:
                l5_avg = player.dff_data.get('L5_fppg_avg', 0)
                if l5_avg > 0 and player.projection > 0:
                    performance_ratio = l5_avg / player.projection
                    if performance_ratio > 1.15:  # 15% better
                        l5_adjustment = min((performance_ratio - 1.0) * 0.6, 0.10) * CONFIDENCE_THRESHOLD
                        if l5_adjustment >= MIN_SIGNIFICANCE:
                            total_adjustment += l5_adjustment

            # Vegas Environment Analysis
            if hasattr(player, 'vegas_data') and player.vegas_data:
                team_total = player.vegas_data.get('team_total', 4.5)
                opp_total = player.vegas_data.get('opponent_total', 4.5)

                if player.primary_position == 'P':
                    if opp_total < 4.0:  # Good matchup
                        vegas_adjustment = min((4.5 - opp_total) / 4.5 * 0.4, 0.08) * CONFIDENCE_THRESHOLD
                        if vegas_adjustment >= MIN_SIGNIFICANCE:
                            total_adjustment += vegas_adjustment
                else:
                    if team_total > 5.0:  # High scoring
                        vegas_adjustment = min((team_total - 4.5) / 4.5 * 0.5, 0.08) * CONFIDENCE_THRESHOLD
                        if vegas_adjustment >= MIN_SIGNIFICANCE:
                            total_adjustment += vegas_adjustment

            # Statcast Analysis
            if hasattr(player, 'statcast_data') and player.statcast_data:
                xwoba = player.statcast_data.get('xwOBA', 0.320)
                if player.primary_position == 'P':
                    if xwoba < 0.290:  # Elite pitcher
                        statcast_adjustment = min((0.320 - xwoba) / 0.320 * 0.4, 0.08) * CONFIDENCE_THRESHOLD
                        if statcast_adjustment >= MIN_SIGNIFICANCE:
                            total_adjustment += statcast_adjustment
                else:
                    if xwoba > 0.350:  # Elite hitter
                        statcast_adjustment = min((xwoba - 0.320) / 0.320 * 0.3, 0.08) * CONFIDENCE_THRESHOLD
                        if statcast_adjustment >= MIN_SIGNIFICANCE:
                            total_adjustment += statcast_adjustment

            # Apply cap
            if total_adjustment > MAX_TOTAL_ADJUSTMENT:
                total_adjustment = MAX_TOTAL_ADJUSTMENT

            # Apply adjustment if significant
            if total_adjustment >= MIN_SIGNIFICANCE:
                adjustment_points = player.enhanced_score * total_adjustment
                player.enhanced_score += adjustment_points
                adjusted_count += 1
                print(f"   üìä {player.name}: +{total_adjustment * 100:.1f}% ({adjustment_points:+.1f} pts)")

        print(f"‚úÖ Adjusted {adjusted_count}/{len(players)} players with 80% confidence")

    def apply_park_factors(self):
        """Apply conservative park factors to players"""
        if not PARK_FACTORS:
            return

        print("üèüÔ∏è Applying conservative park factors...")

        adjusted_count = 0
        for player in self.players:
            # Only apply to eligible players
            if not player.is_eligible_for_selection(self.optimization_mode):
                continue

            # Get opponent team to determine park
            park_team = None
            if hasattr(player, 'vegas_data') and player.vegas_data:
                if player.vegas_data.get('is_home', False):
                    park_team = player.team
                else:
                    park_team = player.vegas_data.get('opponent', '')
            else:
                # Fallback: assume home team
                park_team = player.team

            if park_team in PARK_FACTORS:
                factor = PARK_FACTORS[park_team]
                old_score = player.enhanced_score
                player.enhanced_score *= factor

                # Store park factor info
                player.park_factors = {
                    'park_team': park_team,
                    'factor': factor,
                    'adjustment': player.enhanced_score - old_score
                }

                adjusted_count += 1
                print(f"   üèüÔ∏è {player.name}: {factor:.2f}x factor ({old_score:.1f} ‚Üí {player.enhanced_score:.1f})")

        print(f"‚úÖ Applied park factors to {adjusted_count} players")

    def apply_conservative_stacking(self):
        """Apply conservative stacking boosts for correlated players"""
        print("‚ö° Applying conservative stacking logic...")

        # Group players by team
        teams = {}
        for player in self.players:
            if not player.is_eligible_for_selection(self.optimization_mode):
                continue
            if player.primary_position == 'P':  # Skip pitchers
                continue

            team = player.team
            if team not in teams:
                teams[team] = []
            teams[team].append(player)

        stacked_count = 0

        for team, team_players in teams.items():
            if len(team_players) < 2:  # Need at least 2 players to stack
                continue

            # Check if team has high implied runs (from Vegas data)
            team_implied_runs = 0
            for player in team_players:
                if hasattr(player, 'vegas_data') and player.vegas_data:
                    team_implied_runs = player.vegas_data.get('team_total', 0)
                    break

            if team_implied_runs < STACKING_CONFIG['min_implied_runs']:
                continue

            # Sort players by score
            team_players.sort(key=lambda p: p.enhanced_score, reverse=True)

            # Apply conservative stacking boosts
            stack_size = min(len(team_players), STACKING_CONFIG['max_stack_size'])

            for i, player in enumerate(team_players[:stack_size]):
                if i == 0:  # First player
                    boost = STACKING_CONFIG['stack_boost_small']
                elif i == 1:  # Second player
                    boost = STACKING_CONFIG['stack_boost_medium']
                else:  # Third player
                    boost = STACKING_CONFIG['stack_boost_large']

                old_score = player.enhanced_score
                player.enhanced_score += boost

                # Store stacking info
                if not hasattr(player, 'stacking_data'):
                    player.stacking_data = {}
                player.stacking_data = {
                    'team': team,
                    'stack_position': i + 1,
                    'boost_applied': boost,
                    'team_implied_runs': team_implied_runs
                }

                stacked_count += 1
                print(
                    f"   ‚ö° {player.name} (#{i + 1} in {team} stack): +{boost:.1f} pts ({old_score:.1f} ‚Üí {player.enhanced_score:.1f})")

        print(f"‚úÖ Applied stacking to {stacked_count} players")

    def _optimize_greedy(self, players):
        """Enhanced greedy optimization with multi-position support"""
        print(f"üéØ Enhanced greedy optimization: {len(players)} players")

        # Sort by value (score per salary)
        for player in players:
            player.value_score = player.enhanced_score / (player.salary / 1000.0)

        sorted_players = sorted(players, key=lambda x: x.value_score, reverse=True)

        lineup = []
        total_salary = 0
        position_needs = {'P': 2, 'C': 1, '1B': 1, '2B': 1, '3B': 1, 'SS': 1, 'OF': 3}

        for player in sorted_players:
            if len(lineup) >= 10:
                break

            if total_salary + player.salary > self.salary_cap:
                continue

            # Enhanced position checking with multi-position support
            position_filled = False
            for pos in player.positions:
                if position_needs.get(pos, 0) > 0:
                    lineup.append(player)
                    total_salary += player.salary
                    position_needs[pos] -= 1
                    position_filled = True
                    if len(player.positions) > 1:
                        print(
                            f"üîÑ {player.name} fills {pos} (can also play {'/'.join([p for p in player.positions if p != pos])})")
                    break

            if position_filled:
                continue

        total_score = sum(p.enhanced_score for p in lineup)
        print(f"‚úÖ Enhanced greedy success: {len(lineup)} players, {total_score:.2f} score")
        return lineup, total_score

    def _optimize_milp(self, players):
        """MILP optimization placeholder"""
        print("‚ö†Ô∏è MILP optimization not implemented, using enhanced greedy")
        return self._optimize_greedy(players)


# Enhanced entry point functions
def load_and_optimize_enhanced_pipeline(
        dk_file: str,
        dff_file: str = None,
        manual_input: str = "",
        contest_type: str = 'classic',
        optimization_mode: str = 'bulletproof'  # bulletproof, manual_only, confirmed_only
):
    """Enhanced optimization pipeline with mode support"""

    mode_descriptions = {
        'bulletproof': 'Confirmed + Manual players',
        'manual_only': 'Manual players ONLY',
        'confirmed_only': 'Confirmed players ONLY'
    }

    print("üöÄ ENHANCED BULLETPROOF DFS OPTIMIZATION")
    print("=" * 70)
    print(f"üìä Mode: {optimization_mode} ({mode_descriptions.get(optimization_mode, 'Unknown')})")

    core = EnhancedBulletproofDFSCore()
    core.set_optimization_mode(optimization_mode)

    # Step 1: Load DraftKings data
    if not core.load_draftkings_csv(dk_file):
        return [], 0, "Failed to load DraftKings data"

    # Step 2: Apply manual selection first
    if manual_input:
        manual_count = core.apply_manual_selection(manual_input)
        print(f"‚úÖ Manual selection: {manual_count} players")

    # Step 3: Detect confirmed players (skip if manual_only mode)
    if optimization_mode != 'manual_only':
        confirmed_count = core.detect_confirmed_players()
        print(f"‚úÖ Confirmed detection: {confirmed_count} players")

    # Step 4: Apply DFF rankings
    if dff_file:
        core.apply_dff_rankings(dff_file)

    # Step 5: Enrich with all modules
    core.enrich_with_vegas_lines()
    core.enrich_with_statcast_priority()

    # Step 6: Print debug info
    core.print_eligibility_debug()

    # Step 7: Export debug data
    debug_file = core.export_debug_data()

    # Step 8: Optimization
    lineup, score = core.optimize_lineup_enhanced()

    if lineup:
        total_salary = sum(p.salary for p in lineup)
        summary = f"""
‚úÖ ENHANCED {optimization_mode.upper()} OPTIMIZATION SUCCESS
================================================
Players: {len(lineup)}/10
Total Salary: ${total_salary:,}/{core.salary_cap:,}
Projected Score: {score:.2f}
Mode: {mode_descriptions.get(optimization_mode, 'Unknown')}
Debug file: {debug_file}

LINEUP:
"""
        for i, player in enumerate(lineup, 1):
            status = player.get_detailed_status_string()
            summary += f"{i:2d}. {player.name:<20} {player.primary_position:<3} ${player.salary:,} {player.enhanced_score:.1f} | {status}\n"

        print(summary)
        return lineup, score, summary
    else:
        return [], 0, f"Optimization failed - insufficient eligible players for {optimization_mode} mode"


if __name__ == "__main__":
    # Test the enhanced system
    print("üß™ Testing enhanced system...")

    # You would replace this with actual file paths
    dk_file = "DKSalaries_64.csv"  # Your actual file
    manual_input = "Shohei Ohtani, Francisco Lindor, Juan Soto"

    # Test different modes
    for mode in ['bulletproof', 'manual_only', 'confirmed_only']:
        print(f"\n{'=' * 50}")
        print(f"Testing {mode} mode")
        print(f"{'=' * 50}")

        lineup, score, summary = load_and_optimize_enhanced_pipeline(
            dk_file=dk_file,
            manual_input=manual_input,
            optimization_mode=mode
        )

        if lineup:
            print(f"‚úÖ {mode} mode successful: {len(lineup)} players, {score:.2f} score")
        else:
            print(f"‚ùå {mode} mode failed")