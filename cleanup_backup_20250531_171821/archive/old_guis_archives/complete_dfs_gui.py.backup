#!/usr/bin/env python3
"""
DFS Optimizer GUI - Part 1: Imports and Data Converter
Paste this as the first part of your complete GUI
"""
import sys
import os
import csv
import pandas as pd
import json
import random
import subprocess
import tempfile
import traceback
from datetime import datetime

import tempfile
import atexit

# Global list to track temporary files for cleanup
TEMP_DFF_FILES = []

def cleanup_temp_dff_files():
    """Clean up temporary DFF files on exit"""
    for temp_file in TEMP_DFF_FILES:
        try:
            if os.path.exists(temp_file):
                os.unlink(temp_file)
                print(f'🧹 Cleaned up: {os.path.basename(temp_file)}')
        except:
            pass

# Register cleanup function
atexit.register(cleanup_temp_dff_files)

def create_temp_csv(prefix='dfs_'):
    """Create a temporary CSV file that will be auto-deleted"""
    temp_file = tempfile.NamedTemporaryFile(
        mode='w', 
        suffix='.csv', 
        prefix=prefix,
        delete=False
    )
    temp_file.close()
    TEMP_DFF_FILES.append(temp_file.name)
    return temp_file.name


try:
    from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                                 QLabel, QPushButton, QCheckBox, QFileDialog, QTextEdit,
                                 QSpinBox, QGroupBox, QFormLayout, QLineEdit, QMessageBox,
                                 QTabWidget, QComboBox, QProgressBar)
    from PyQt5.QtCore import Qt, QThread, pyqtSignal
    from PyQt5.QtGui import QFont
except ImportError:
    print("Installing PyQt5...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "PyQt5"])
    from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                                 QLabel, QPushButton, QCheckBox, QFileDialog, QTextEdit,
                                 QSpinBox, QGroupBox, QFormLayout, QLineEdit, QMessageBox,
                                 QTabWidget, QComboBox, QProgressBar)
    from PyQt5.QtCore import Qt, QThread, pyqtSignal
    from PyQt5.QtGui import QFont


class DFFDataConverter:
    """Handles automatic DFF data conversion with smart player recognition"""

    def __init__(self):
        self.dff_data = None
        self.converted_files = {}

        # Enhanced player name matching
        self.nickname_map = {
            'alexander': ['alex', 'al'], 'andrew': ['andy', 'drew'], 'anthony': ['tony'],
            'christopher': ['chris', 'kris'], 'daniel': ['dan', 'danny'], 'david': ['dave'],
            'edward': ['ed', 'eddie'], 'francisco': ['cisco', 'paco'], 'gabriel': ['gabe'],
            'james': ['jim', 'jimmy', 'jamie'], 'jeffrey': ['jeff'], 'john': ['johnny', 'jon'],
            'jonathan': ['jon', 'johnny'], 'joseph': ['joe', 'joey'], 'joshua': ['josh'],
            'matthew': ['matt', 'matty'], 'michael': ['mike', 'mickey'], 'nicholas': ['nick', 'nico'],
            'robert': ['rob', 'bob', 'bobby'], 'thomas': ['tom', 'tommy'], 'william': ['will', 'bill']
        }

    def auto_detect_format(self, file_path):
        """Automatically detect DFF file format and load data"""
        try:
            # Try different separators and encodings
            attempts = [
                ('\t', 'utf-8'), (',', 'utf-8'), (';', 'utf-8'),
                ('\t', 'latin-1'), (',', 'latin-1')
            ]

            for sep, encoding in attempts:
                try:
                    df = pd.read_csv(file_path, sep=sep, encoding=encoding)
                    if len(df.columns) > 5 and len(df) > 0:
                        self.dff_data = df
                        return True, f"Loaded {len(df)} players with {len(df.columns)} columns"
                except:
                    continue

            return False, "Could not read file with any format"

        except Exception as e:
            return False, f"Error loading file: {str(e)}"

    def convert_dff_to_optimizer_format(self):
        """Convert DFF data to optimizer format automatically"""
        if self.dff_data is None:
            return False, "No DFF data loaded"

        try:
            df = self.dff_data
            converted_df = pd.DataFrame()

            # Auto-detect and convert player names
            if 'first_name' in df.columns and 'last_name' in df.columns:
                converted_df['Name'] = df['first_name'].astype(str) + ' ' + df['last_name'].astype(str)
            elif any('name' in col.lower() for col in df.columns):
                name_col = next(col for col in df.columns if 'name' in col.lower())
                converted_df['Name'] = df[name_col]
            else:
                return False, "Cannot find player name columns"

            # Auto-detect position
            pos_cols = [col for col in df.columns if 'position' in col.lower() or col.lower() == 'pos']
            if pos_cols:
                converted_df['Position'] = df[pos_cols[0]]
            else:
                return False, "Cannot find position column"

            # Auto-detect team
            team_cols = [col for col in df.columns if 'team' in col.lower()]
            if team_cols:
                converted_df['Team'] = df[team_cols[0]].str.upper()
            else:
                return False, "Cannot find team column"

            # Create rankings
            converted_df['DFF_Rank'] = range(1, len(df) + 1)

            # Auto-detect projection columns
            proj_cols = [col for col in df.columns if 'ppg' in col.lower() and 'proj' in col.lower()]
            if proj_cols:
                converted_df['DFF_Score'] = df[proj_cols[0]]
            else:
                converted_df['DFF_Score'] = 10.0

            # Create tiers
            converted_df['DFF_Tier'] = self._create_tiers_from_rank(converted_df['DFF_Rank'])

            # Create notes
            converted_df['Notes'] = self._create_notes(df)

            # Save converted DFF data
            dff_output = create_temp_csv("dff_converted_")
            converted_df.to_csv(dff_output, index=False)
            self.converted_files['dff'] = dff_output

            return True, f"Converted {len(converted_df)} players to optimizer format"

        except Exception as e:
            return False, f"Conversion error: {str(e)}"

    def generate_recent_performance_data(self):
        """Auto-generate recent performance from DFF L5/L10 averages"""
        if self.dff_data is None:
            return False, "No DFF data loaded"

        try:
            df = self.dff_data
            recent_data = []

            # Auto-detect L5/L10 columns
            l5_cols = [col for col in df.columns if 'l5' in col.lower() and 'fppg' in col.lower()]
            l10_cols = [col for col in df.columns if 'l10' in col.lower() and 'fppg' in col.lower()]
            season_cols = [col for col in df.columns if 'szn' in col.lower() and 'fppg' in col.lower()]

            for idx, row in df.iterrows():
                # Get player info
                if 'first_name' in df.columns and 'last_name' in df.columns:
                    player_name = f"{row['first_name']} {row['last_name']}"
                else:
                    continue

                position = row.get('position', 'UTIL')
                team = str(row.get('team', 'UNK')).upper()

                # Extract performance data
                l5_avg = float(row[l5_cols[0]]) if l5_cols and pd.notna(row.get(l5_cols[0])) else 0
                l10_avg = float(row[l10_cols[0]]) if l10_cols and pd.notna(row.get(l10_cols[0])) else 0
                season_avg = float(row[season_cols[0]]) if season_cols and pd.notna(row.get(season_cols[0])) else 0

                # Calculate metrics
                metrics = self._calculate_performance_metrics(position, l5_avg, l10_avg, season_avg)

                recent_data.append({
                    'Name': player_name,
                    'Position': position,
                    'Team': team,
                    'Recent_xwOBA': metrics['recent_xwoba'],
                    'Recent_PA': metrics['recent_pa'],
                    'Recent_Games': 5,
                    'Trend': metrics['trend'],
                    'Season_xwOBA': metrics['season_xwoba'],
                    'Last_Updated': datetime.now().strftime('%Y-%m-%d')
                })

            # Save recent performance
            recent_df = pd.DataFrame(recent_data)
            perf_output = create_temp_csv("recent_performance_")
            recent_df.to_csv(perf_output, index=False)
            self.converted_files['recent_performance'] = perf_output

            return True, f"Generated recent performance for {len(recent_df)} players"

        except Exception as e:
            return False, f"Performance generation error: {str(e)}"

    def generate_team_context_data(self):
        """Auto-generate team context for better name matching"""
        if self.dff_data is None:
            return False, "No DFF data loaded"

        try:
            df = self.dff_data
            context_data = []

            for idx, row in df.iterrows():
                if 'first_name' in df.columns and 'last_name' in df.columns:
                    first_name = str(row['first_name']).strip()
                    last_name = str(row['last_name']).strip()
                    full_name = f"{first_name} {last_name}"
                    team = str(row.get('team', 'UNK')).upper()

                    context_data.append({
                        'Name': full_name,
                        'Team': team,
                        'Source': 'DFF_main'
                    })

                    # Add nickname variations
                    first_lower = first_name.lower()
                    if first_lower in self.nickname_map:
                        for nickname in self.nickname_map[first_lower]:
                            context_data.append({
                                'Name': f"{nickname.title()} {last_name}",
                                'Team': team,
                                'Source': 'nickname'
                            })

            # Remove duplicates and save
            context_df = pd.DataFrame(context_data)
            context_df = context_df.drop_duplicates(subset=['Name', 'Team'])
            context_output = create_temp_csv("team_context_")
            context_df.to_csv(context_output, index=False)
            self.converted_files['team_context'] = context_output

            return True, f"Generated team context with {len(context_df)} entries"

        except Exception as e:
            return False, f"Team context error: {str(e)}"

    def convert_all_data(self):
        """Convert all DFF data automatically"""
        results = []

        success, msg = self.convert_dff_to_optimizer_format()
        results.append(f"DFF Conversion: {'✅' if success else '❌'} {msg}")

        success, msg = self.generate_recent_performance_data()
        results.append(f"Recent Performance: {'✅' if success else '❌'} {msg}")

        success, msg = self.generate_team_context_data()
        results.append(f"Team Context: {'✅' if success else '❌'} {msg}")

        return len(self.converted_files) >= 3, results

    def _create_tiers_from_rank(self, ranks):
        """Create tiers from rankings"""
        max_rank = len(ranks)
        tiers = []
        for rank in ranks:
            pct = rank / max_rank
            if pct <= 0.1:
                tiers.append('A+')
            elif pct <= 0.25:
                tiers.append('A')
            elif pct <= 0.4:
                tiers.append('B+')
            elif pct <= 0.6:
                tiers.append('B')
            elif pct <= 0.8:
                tiers.append('C+')
            else:
                tiers.append('C')
        return tiers

    def _create_notes(self, df):
        """Create comprehensive notes from available data"""
        notes = []
        for idx, row in df.iterrows():
            note_parts = []

            # Add salary if available
            salary_cols = [col for col in df.columns if 'salary' in col.lower()]
            if salary_cols and pd.notna(row.get(salary_cols[0])):
                salary = int(row[salary_cols[0]])
                note_parts.append(f"${salary:,}")

            # Add value projection
            value_cols = [col for col in df.columns if 'value' in col.lower() and 'proj' in col.lower()]
            if value_cols and pd.notna(row.get(value_cols[0])):
                value = float(row[value_cols[0]])
                note_parts.append(f"Val:{value:.2f}")

            notes.append(" | ".join(note_parts))

        return notes

    def _calculate_performance_metrics(self, position, l5_avg, l10_avg, season_avg):
        """Calculate performance metrics from averages"""
        # Determine trend
        if l5_avg > 0 and season_avg > 0:
            ratio = l5_avg / season_avg
            if ratio >= 1.3:
                trend = 'hot'
            elif ratio >= 0.85:
                trend = 'stable'
            else:
                trend = 'cold'
        else:
            trend = 'stable'

        # Generate xwOBA estimates
        if position == 'P':
            base_xwoba = 0.320
            if trend == 'hot':
                recent_xwoba = 0.290
            elif trend == 'cold':
                recent_xwoba = 0.350
            else:
                recent_xwoba = base_xwoba
            recent_pa = random.randint(20, 40)
        else:
            base_xwoba = 0.320
            if trend == 'hot':
                recent_xwoba = 0.370
            elif trend == 'cold':
                recent_xwoba = 0.280
            else:
                recent_xwoba = base_xwoba
            recent_pa = random.randint(25, 35)

        return {
            'recent_xwoba': round(recent_xwoba, 3),
            'season_xwoba': round(base_xwoba, 3),
            'recent_pa': recent_pa,
            'trend': trend
        }
# DFS Optimizer GUI - Part 2: Main GUI Class
# Paste this after Part 1

class UnifiedDFSGUI(QMainWindow):
    """Main GUI class - clean and functional"""

    def __init__(self):
        super().__init__()
        self.setWindowTitle("DFS Optimizer - Complete Interface")
        self.setMinimumSize(900, 700)

        # Core variables
        self.dff_file = ""
        self.dk_file = ""
        self.converter = None
        self.optimization_thread = None

        self.setup_ui()
        self.setup_basic_styles()

    def setup_basic_styles(self):
        """Clean, functional styling"""
        self.setStyleSheet("""
            QMainWindow { background-color: #f5f5f5; }
            QGroupBox { 
                font-weight: bold; 
                border: 1px solid #ccc; 
                border-radius: 4px; 
                margin-top: 8px; 
                padding-top: 8px; 
            }
            QGroupBox::title { 
                subcontrol-origin: margin; 
                left: 8px; 
                padding: 0 4px; 
            }
            QPushButton { 
                padding: 6px 12px; 
                border-radius: 3px; 
                border: 1px solid #ccc; 
                background-color: white; 
            }
            QPushButton:hover { background-color: #e8e8e8; }
            QPushButton:pressed { background-color: #d0d0d0; }
            QTextEdit { 
                font-family: Consolas, monospace; 
                font-size: 9pt; 
                border: 1px solid #ccc; 
            }
        """)

    def setup_ui(self):
        """Set up the main interface"""
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        layout = QVBoxLayout(main_widget)

        # Header
        header = QLabel("DFS Optimizer - Complete Interface")
        header.setFont(QFont("Arial", 12, QFont.Bold))
        header.setAlignment(Qt.AlignCenter)
        header.setStyleSheet("padding: 8px; color: #333;")
        layout.addWidget(header)

        # Create tabs
        tabs = QTabWidget()

        # === TAB 1: DATA SETUP ===
        data_tab = QWidget()
        data_layout = QVBoxLayout(data_tab)

        # DFF File Selection
        dff_group = QGroupBox("Step 1: DFF Cheat Sheet")
        dff_layout = QVBoxLayout()

        dff_file_layout = QHBoxLayout()
        self.dff_label = QLabel("No DFF file selected")
        self.dff_label.setStyleSheet("color: red; padding: 4px;")

        dff_select_btn = QPushButton("Select DFF File")
        dff_select_btn.clicked.connect(self.select_dff_file)

        dff_convert_btn = QPushButton("Convert DFF Data")
        dff_convert_btn.clicked.connect(self.convert_dff_data)
        self.dff_convert_btn = dff_convert_btn
        dff_convert_btn.setEnabled(False)

        dff_file_layout.addWidget(self.dff_label, 2)
        dff_file_layout.addWidget(dff_select_btn, 1)
        dff_file_layout.addWidget(dff_convert_btn, 1)
        dff_layout.addLayout(dff_file_layout)

        # Conversion status
        self.conversion_status = QTextEdit()
        self.conversion_status.setMaximumHeight(100)
        self.conversion_status.setStyleSheet("background-color: #f9f9f9;")
        self.conversion_status.append("Ready to convert DFF data...")
        dff_layout.addWidget(self.conversion_status)

        dff_group.setLayout(dff_layout)
        data_layout.addWidget(dff_group)

        # DraftKings File Selection
        dk_group = QGroupBox("Step 2: DraftKings CSV")
        dk_layout = QVBoxLayout()

        dk_file_layout = QHBoxLayout()
        self.dk_label = QLabel("No DraftKings file selected")
        self.dk_label.setStyleSheet("color: red; padding: 4px;")

        dk_select_btn = QPushButton("Select DraftKings CSV")
        dk_select_btn.clicked.connect(self.select_dk_file)

        dk_file_layout.addWidget(self.dk_label, 2)
        dk_file_layout.addWidget(dk_select_btn, 1)
        dk_layout.addLayout(dk_file_layout)

        dk_group.setLayout(dk_layout)
        data_layout.addWidget(dk_group)

        data_layout.addStretch()
        tabs.addTab(data_tab, "Data Setup")

        # === TAB 2: OPTIMIZATION SETTINGS ===
        opt_tab = QWidget()
        opt_layout = QVBoxLayout(opt_tab)

        # Contest Type
        contest_group = QGroupBox("Contest Type")
        contest_layout = QVBoxLayout()

        self.classic_cb = QCheckBox("Classic Contest (10 players)")
        self.classic_cb.setChecked(True)
        self.showdown_cb = QCheckBox("Showdown Contest (6 players)")

        # Make mutually exclusive
        self.classic_cb.toggled.connect(lambda x: self.showdown_cb.setChecked(not x) if x else None)
        self.showdown_cb.toggled.connect(lambda x: self.classic_cb.setChecked(not x) if x else None)

        contest_layout.addWidget(self.classic_cb)
        contest_layout.addWidget(self.showdown_cb)
        contest_group.setLayout(contest_layout)
        opt_layout.addWidget(contest_group)

        # Basic Settings
        settings_group = QGroupBox("Optimization Settings")
        settings_layout = QFormLayout()

        # MILP Optimizer
        self.milp_cb = QCheckBox("Use MILP Optimizer (Recommended)")
        self.milp_cb.setChecked(True)
        settings_layout.addRow("", self.milp_cb)

        # Attempts
        self.attempts_spin = QSpinBox()
        self.attempts_spin.setRange(500, 5000)
        self.attempts_spin.setValue(2000)
        settings_layout.addRow("Attempts:", self.attempts_spin)

        # Budget
        self.budget_spin = QSpinBox()
        self.budget_spin.setRange(40000, 60000)
        self.budget_spin.setValue(50000)
        settings_layout.addRow("Budget:", self.budget_spin)

        # Stacking
        stack_layout = QHBoxLayout()
        self.min_stack_spin = QSpinBox()
        self.min_stack_spin.setRange(2, 5)
        self.min_stack_spin.setValue(2)
        self.max_stack_spin = QSpinBox()
        self.max_stack_spin.setRange(3, 6)
        self.max_stack_spin.setValue(4)

        stack_layout.addWidget(QLabel("Min:"))
        stack_layout.addWidget(self.min_stack_spin)
        stack_layout.addWidget(QLabel("Max:"))
        stack_layout.addWidget(self.max_stack_spin)
        settings_layout.addRow("Team Stack:", stack_layout)

        settings_group.setLayout(settings_layout)
        opt_layout.addWidget(settings_group)

        # Data Sources
        sources_group = QGroupBox("Data Sources")
        sources_layout = QVBoxLayout()

        self.statcast_cb = QCheckBox("Use Statcast Metrics")
        self.statcast_cb.setChecked(True)
        sources_layout.addWidget(self.statcast_cb)

        self.vegas_cb = QCheckBox("Use Vegas Lines")
        self.vegas_cb.setChecked(True)
        sources_layout.addWidget(self.vegas_cb)

        self.confirmed_pitchers_cb = QCheckBox("Only Confirmed Starting Pitchers")
        self.confirmed_pitchers_cb.setChecked(True)
        sources_layout.addWidget(self.confirmed_pitchers_cb)
        
        self.confirmed_only_cb = QCheckBox("Only Use Confirmed Lineup Players")
        self.confirmed_only_cb.setChecked(False)
        sources_layout.addWidget(self.confirmed_only_cb)

        sources_group.setLayout(sources_layout)
        opt_layout.addWidget(sources_group)

        opt_layout.addStretch()
        tabs.addTab(opt_tab, "Settings")

        # === TAB 3: MANUAL PLAYERS ===
        manual_tab = QWidget()
        manual_layout = QVBoxLayout(manual_tab)

        # Manual Player Selection
        manual_group = QGroupBox("Manual Player Selection")
        manual_group_layout = QVBoxLayout()

        self.manual_cb = QCheckBox("Include Specific Players")
        manual_group_layout.addWidget(self.manual_cb)

        self.manual_only_cb = QCheckBox("Use ONLY Specific Players (ignore all others)")
        self.manual_only_cb.setEnabled(False)
        self.manual_cb.toggled.connect(self.manual_only_cb.setEnabled)
        manual_group_layout.addWidget(self.manual_only_cb)

        self.manual_input = QLineEdit()
        self.manual_input.setPlaceholderText("Enter player names separated by commas")
        self.manual_input.setEnabled(False)
        self.manual_cb.toggled.connect(self.manual_input.setEnabled)
        manual_group_layout.addWidget(self.manual_input)

        manual_group.setLayout(manual_group_layout)
        manual_layout.addWidget(manual_group)

        # Output verbosity
        verbosity_group = QGroupBox("Output Detail")
        verbosity_layout = QVBoxLayout()

        self.verbosity_combo = QComboBox()
        self.verbosity_combo.addItems(["Quiet", "Normal", "Verbose"])
        self.verbosity_combo.setCurrentIndex(1)
        verbosity_layout.addWidget(self.verbosity_combo)

        verbosity_group.setLayout(verbosity_layout)
        manual_layout.addWidget(verbosity_group)

        manual_layout.addStretch()
        tabs.addTab(manual_tab, "Advanced")

        # Add tabs to main layout
        layout.addWidget(tabs)

        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)

        # Run button
        self.run_btn = QPushButton("Run DFS Optimizer")
        self.run_btn.setEnabled(False)
        self.run_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                font-weight: bold;
                padding: 12px;
                font-size: 11pt;
                border: none;
                border-radius: 4px;
            }
            QPushButton:hover { background-color: #45a049; }
            QPushButton:disabled { background-color: #cccccc; }
        """)
        self.run_btn.clicked.connect(self.run_optimization)
        layout.addWidget(self.run_btn)

        # Output console
        console_label = QLabel("Output:")
        console_label.setStyleSheet("font-weight: bold; margin-top: 8px;")
        layout.addWidget(console_label)

        self.console = QTextEdit()
        self.console.setReadOnly(True)
        self.console.setMinimumHeight(200)
        self.console.setStyleSheet("""
            background-color: #2b2b2b;
            color: #ffffff;
            font-family: Consolas, monospace;
            font-size: 9pt;
            border: 1px solid #555;
        """)

        # Welcome message
        self.console.append("DFS Optimizer Ready!")
        self.console.append("1. Select your DFF cheat sheet")
        self.console.append("2. Convert DFF data")
        self.console.append("3. Select DraftKings CSV")
        self.console.append("4. Run optimizer")
        self.console.append("")

        layout.addWidget(self.console)
# DFS Optimizer GUI - Part 3: GUI Methods
# Paste this after Part 2

    def select_dff_file(self):
        """Select DFF cheat sheet file"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Select DFF Cheat Sheet", "",
            "CSV Files (*.csv);;Text Files (*.txt);;All Files (*)"
        )

        if file_path:
            self.dff_file = file_path
            filename = os.path.basename(file_path)
            self.dff_label.setText(f"Selected: {filename}")
            self.dff_label.setStyleSheet("color: green; padding: 4px;")
            self.dff_convert_btn.setEnabled(True)
            self.console.append(f"Selected DFF file: {filename}")

    def select_dk_file(self):
        """Select DraftKings CSV file"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Select DraftKings CSV", "",
            "CSV Files (*.csv);;All Files (*)"
        )

        if file_path:
            self.dk_file = file_path
            filename = os.path.basename(file_path)
            self.dk_label.setText(f"Selected: {filename}")
            self.dk_label.setStyleSheet("color: green; padding: 4px;")
            self.console.append(f"Selected DraftKings file: {filename}")

            # Enable run button if we have converted data
            if hasattr(self.converter, 'converted_files') and self.converter.converted_files:
                self.run_btn.setEnabled(True)

    def convert_dff_data(self):
        """Convert DFF data using the converter"""
        if not self.dff_file:
            return

        self.console.append("Converting DFF data...")
        self.conversion_status.clear()

        try:
            # Create converter instance
            self.converter = DFFDataConverter()

            # Load and convert data
            success, msg = self.converter.auto_detect_format(self.dff_file)
            if not success:
                self.conversion_status.append(f"Error: {msg}")
                return

            self.conversion_status.append(f"Loaded: {msg}")

            # Convert all data
            success, results = self.converter.convert_all_data()

            for result in results:
                self.conversion_status.append(result)

            if success:
                self.console.append("DFF data conversion completed!")
                self.console.append(f"Generated {len(self.converter.converted_files)} data files")

                # Enable run button if we also have DK file
                if self.dk_file:
                    self.run_btn.setEnabled(True)
            else:
                self.console.append("DFF conversion had issues - check conversion status")

        except Exception as e:
            error_msg = f"Conversion error: {str(e)}"
            self.conversion_status.append(error_msg)
            self.console.append(error_msg)

    def run_optimization(self):
        """Start the optimization process"""
        if not self.dk_file or not hasattr(self.converter, 'converted_files'):
            QMessageBox.warning(self, "Error", "Please select files and convert DFF data first.")
            return

        self.console.append("\nStarting optimization...")
        self.run_btn.setEnabled(False)
        self.run_btn.setText("Running...")
        self.progress_bar.setVisible(True)

        # Start optimization thread
        self.start_optimization_thread()

    def start_optimization_thread(self):
        """Start optimization in background thread"""
        self.optimization_thread = OptimizationThread(self)
        self.optimization_thread.output_signal.connect(self.console.append)
        self.optimization_thread.progress_signal.connect(self.progress_bar.setValue)
        self.optimization_thread.finished_signal.connect(self.optimization_finished)
        self.optimization_thread.start()

    def optimization_finished(self, success, result):
        """Handle optimization completion"""
        try:
            if success:
                self.console.append("\n" + "=" * 50)
                self.console.append("OPTIMIZATION COMPLETED!")
                self.console.append("=" * 50)

                # Try to read results from output file
                if hasattr(self.optimization_thread, 'temp_output_file'):
                    try:
                        with open(self.optimization_thread.temp_output_file, 'r') as f:
                            results = f.read().strip()
                        if results:
                            self.console.append("\nOPTIMAL LINEUP:")
                            self.console.append("-" * 30)
                            self.console.append(results)

                        # Clean up temp file
                        os.unlink(self.optimization_thread.temp_output_file)
                    except Exception as e:
                        self.console.append(f"Could not read results file: {e}")

                self.console.append("\nNext Steps:")
                self.console.append("1. Copy lineup to DraftKings")
                self.console.append("2. Verify players are in starting lineups")
                self.console.append("3. Submit before contest locks!")

            else:
                self.console.append(f"\nOptimization failed: {result}")
                self.console.append("\nTroubleshooting:")
                self.console.append("- Check that all CSV files are valid")
                self.console.append("- Ensure DraftKings file has correct format")
                self.console.append("- Try with different settings")

        except Exception as e:
            self.console.append(f"Error handling results: {str(e)}")

        finally:
            # Reset UI
            self.run_btn.setEnabled(True)
            self.run_btn.setText("Run DFS Optimizer")
            self.progress_bar.setVisible(False)
            self.optimization_thread = None
# DFS Optimizer GUI - Part 4: Optimization Thread and Main Function
# Paste this after Part 3

class OptimizationThread(QThread):
    """Background thread for running optimization without freezing GUI"""

    output_signal = pyqtSignal(str)
    finished_signal = pyqtSignal(bool, str)
    progress_signal = pyqtSignal(int)

    def __init__(self, gui_instance):
        super().__init__()
        self.gui = gui_instance

    def run(self):
        """Run the optimization process"""
        try:
            self.progress_signal.emit(10)
            self.output_signal.emit("Building optimization command...")

            # Build the command
            cmd = self.build_optimization_command()
            if not cmd:
                self.finished_signal.emit(False, "Could not build optimization command")
                return

            self.progress_signal.emit(20)
            self.output_signal.emit("Starting optimizer...")

            # Run the optimization
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                cwd='.'
            )

            self.progress_signal.emit(30)

            # Capture output
            output_lines = []
            progress = 30

            while True:
                line = process.stdout.readline()
                if not line and process.poll() is not None:
                    break

                if line:
                    line = line.rstrip()
                    output_lines.append(line)

                    # Filter output based on verbosity
                    verbosity = self.gui.verbosity_combo.currentIndex()
                    should_show = True

                    if verbosity == 0:  # Quiet
                        should_show = any(keyword in line.lower() for keyword in [
                            'error', 'best', 'lineup', 'score', 'completed', 'failed'
                        ])

                    if should_show:
                        self.output_signal.emit(line)

                    # Update progress based on content
                    if any(keyword in line.lower() for keyword in ['loading', 'processing']):
                        progress = min(progress + 2, 60)
                    elif 'optimization' in line.lower() and 'running' in line.lower():
                        progress = 70
                    elif 'best lineup' in line.lower():
                        progress = 90

                    self.progress_signal.emit(progress)

            # Check result
            return_code = process.poll()
            self.progress_signal.emit(100)

            if return_code == 0:
                self.finished_signal.emit(True, '\n'.join(output_lines))
            else:
                self.finished_signal.emit(False, f"Optimization failed (exit code: {return_code})")

        except Exception as e:
            self.finished_signal.emit(False, f"Error: {str(e)}")

    def build_optimization_command(self):
        """Build the command line for optimization"""
        try:
            # Find the optimizer script
            possible_scripts = [
                "dfs_runner_enhanced.py",
                "enhanced_dfs_runner.py",
                "dfs_runner.py"
            ]

            optimizer_script = None
            for script in possible_scripts:
                if os.path.exists(script):
                    optimizer_script = script
                    break

            if not optimizer_script:
                self.output_signal.emit("Error: No optimizer script found")
                self.output_signal.emit("Expected: dfs_runner_enhanced.py")
                return None

            # Create temporary output file
            output_file = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False)
            output_file.close()

            # Build base command
            cmd = [
                sys.executable,
                optimizer_script,
                '--dk', self.gui.dk_file,
                '--output', output_file.name,
                '--attempts', str(self.gui.attempts_spin.value()),
                '--budget', str(self.gui.budget_spin.value()),
                '--min-stack', str(self.gui.min_stack_spin.value()),
                '--max-stack', str(self.gui.max_stack_spin.value())
            ]

            # Add converted data files
            if hasattr(self.gui.converter, 'converted_files'):
                files = self.gui.converter.converted_files

                if 'dff' in files and os.path.exists(files['dff']):
                    cmd.extend(['--dff-cheat-sheet', files['dff']])

                if 'recent_performance' in files and os.path.exists(files['recent_performance']):
                    cmd.extend(['--recent-performance', files['recent_performance']])

                if 'team_context' in files and os.path.exists(files['team_context']):
                    cmd.extend(['--team-context', files['team_context']])

            # Add contest type
            if self.gui.showdown_cb.isChecked():
                cmd.append('--showdown')

            # Add optimizer type
            if self.gui.milp_cb.isChecked():
                cmd.append('--milp')

            # Add data sources
            if self.gui.statcast_cb.isChecked():
                cmd.append('--statcast')

            if not self.gui.vegas_cb.isChecked():
                cmd.append('--no-vegas')

            if self.gui.confirmed_pitchers_cb.isChecked():
                cmd.append('--confirmed-pitchers-only')

            # Add verbosity
            verbosity = self.gui.verbosity_combo.currentIndex()
            if verbosity == 0:
                cmd.append('--quiet')
            elif verbosity == 2:
                cmd.append('--verbose')

            # Add manual players
            if self.gui.manual_cb.isChecked() and self.gui.manual_input.text().strip():
                manual_players = [p.strip() for p in self.gui.manual_input.text().split(',') if p.strip()]
                if manual_players:
                    # Create temporary file with manual players
                    manual_file = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False)
                    manual_file.write('\n'.join(manual_players))
                    manual_file.close()
                    cmd.extend(['--manual-players', manual_file.name])

            # Always save aliases for better name matching
            cmd.append('--save-aliases')

            self.temp_output_file = output_file.name
            return cmd

        except Exception as e:
            self.output_signal.emit(f"Error building command: {str(e)}")
            return None


def main():
    """Main application entry point"""
    try:
        app = QApplication(sys.argv)
        app.setApplicationName("DFS Optimizer")

        # Create and show main window
        window = UnifiedDFSGUI()
        window.show()

        # Add startup message
        window.console.append("=" * 50)
        window.console.append("DFS OPTIMIZER READY!")
        window.console.append("=" * 50)
        window.console.append("Features:")
        window.console.append("✓ Automatic DFF data conversion")
        window.console.append("✓ Smart player name matching")
        window.console.append("✓ Recent performance integration")
        window.console.append("✓ MILP optimization")
        window.console.append("✓ Vegas lines integration")
        window.console.append("")
        window.console.append("Quick Start:")
        window.console.append("1. Go to 'Data Setup' tab")
        window.console.append("2. Select your DFF cheat sheet")
        window.console.append("3. Click 'Convert DFF Data'")
        window.console.append("4. Select DraftKings CSV")
        window.console.append("5. Configure settings and run!")
        window.console.append("")

        # Start the application
        sys.exit(app.exec_())

    except Exception as e:
        print(f"Error starting application: {e}")
        traceback.print_exc()


if __name__ == "__main__":
    main()